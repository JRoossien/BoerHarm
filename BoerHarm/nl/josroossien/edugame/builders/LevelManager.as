package nl.josroossien.edugame.builders  {		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Rectangle;		import nl.josroossien.edugame.display.GameS;	import nl.josroossien.edugame.levels.Autumn;	import nl.josroossien.edugame.levels.AutumnBoss;	import nl.josroossien.edugame.levels.Spring;	import nl.josroossien.edugame.levels.SpringBoss;	import nl.josroossien.edugame.levels.Summer;	import nl.josroossien.edugame.levels.SummerBoss;	import nl.josroossien.edugame.levels.Winter;	import nl.josroossien.edugame.levels.WinterBoss;	import nl.josroossien.edugame.objects.FlyingEnemy;	import nl.josroossien.edugame.objects.Player;	import nl.josroossien.edugame.objects.Projectile;	import nl.josroossien.edugame.objects.SpiderEnemy;	import nl.josroossien.edugame.objects.WalkingEnemy;	import nl.josroossien.edugame.utils.DisplayUtil;	import nl.josroossien.edugame.utils.RectangleCollision;
		public class LevelManager extends MovieClip {	public static var levelM:LevelManager;	public var level:Object;	public var levelID:Number;	public var spring:Spring;	public var summer:Summer;	public var autumn:Autumn;	public var winter:Winter;	public var springBoss:SpringBoss;	public var summerBoss:SummerBoss;	public var autumnBoss:AutumnBoss;	public var winterBoss:WinterBoss;	private var healthBarOutside:HealthBarOut;	private var healtBar:HealthBarIn;	public var itemsCompleted:Number = 0;	public var p:Player;	private var e1:FlyingEnemy;	private var e2:FlyingEnemy;	private var e3:SpiderEnemy;	private var e4:WalkingEnemy;	public var levelString:String;	public var boss:Boolean;	private var proj:Projectile;	public var projs = new Array();	public var enemies = new Array();	public var LvlObjects = new Array();	public var LvlItems = new Array();	public var LvlPotato = new Array();	public function LevelManager(level:String) {		levelM = this;		loadLevel(level);		p = new Player();		addChild(p);		addEventListener(Event.ENTER_FRAME, loop);	}		public static function getLevelM():LevelManager {		return levelM;	}		private function loop(e:Event):void {		moveScene();		updateHP();	}		private function moveScene():void {		if (boss == false) {			this.x += (-Player.getPlayer().x-(this.x-512))*0.1;		}	}		public function checkP():void {		for (var i:Number = 0 ; i < numChildren ; i++) {			if (getChildAt(i).name == "player") {				trace("PLAYER FOUND!");			}		}	}		public function createEnemy(type:int):void {		switch (type) {			case 1:				e1 = new FlyingEnemy(2);				addChild(e1);				enemies.push(e1);				break;			case 2:				e2 = new FlyingEnemy(1);				addChild(e2);				enemies.push(e2);				break;			case 3:				e3 = new SpiderEnemy(1);				addChild(e3);				enemies.push(e3);				break;			case 4:				e4 = new WalkingEnemy(1);				addChild(e4);				enemies.push(e4);				break;			default:				trace("ERROR: Unknown enemy type.");				break;		}	}		public function loadLevel(level:String) {		switch (level) {			case "none":				break;			case "spring":				setupSpring();				break;			case "summer":				setupSummer();				break;			case "autumn":				setupAutumn();				break;			case "winter":				setupWinter();				break;			case "springboss":				setupSpringBoss();				break;			case "summerboss":				setupSummerBoss();				break;			case "autumnboss":				setupAutumnBoss();				break;			case "winterboss":				setupWinterBoss();				break;			default:				trace("ERROR: Unknown level.");				break;		}	}		private function setupSpring() {		spring = new Spring();		addChild(spring);		DisplayUtil.sendToBack(spring);		boss = false;		GameS.getGameS().countDownScore = true;		createEnemy(1);		createEnemy(1);		createEnemy(1);		createEnemy(1);		createEnemy(1);		createEnemy(1);		level = spring;		levelID = 1;		levelString = "spring";	}		private function setupSummer() {		summer = new Summer();		addChild(summer);		DisplayUtil.sendToBack(summer);		boss = false;		GameS.getGameS().countDownScore = true;		createEnemy(2);		createEnemy(2);		createEnemy(2);		createEnemy(2);		level = summer;		levelID = 2;		levelString = "summer";	}		private function setupAutumn() {		autumn = new Autumn();		addChild(autumn);		DisplayUtil.sendToBack(autumn);		boss = false;		GameS.getGameS().countDownScore = true;		createEnemy(3);		createEnemy(3);		createEnemy(3);		createEnemy(3);		level = autumn;		levelID = 3;		levelString = "autumn";	}		private function setupWinter() {		winter = new Winter();		addChild(winter);		DisplayUtil.sendToBack(winter);		boss = false;		GameS.getGameS().countDownScore = true;		createEnemy(4);		createEnemy(4);		createEnemy(4);		createEnemy(4);		level = winter;		levelID = 4;		levelString = "winter";	}		private function setupSpringBoss() {		springBoss = new SpringBoss();		addChild(springBoss);		DisplayUtil.sendToBack(springBoss);		boss = true;		GameS.getGameS().countDownScore = false;		level = springBoss;		levelID = 1;		levelString = "spring";		setupBossHpBar();	}		private function setupSummerBoss() {		summerBoss = new SummerBoss();		addChild(summerBoss);		DisplayUtil.sendToBack(summerBoss);		boss = true;		GameS.getGameS().countDownScore = false;		level = summerBoss;		levelID = 1;		levelString = "summer";		setupBossHpBar();	}		private function setupAutumnBoss() {		autumnBoss = new AutumnBoss();		addChild(autumnBoss);		DisplayUtil.sendToBack(autumnBoss);		boss = true;		GameS.getGameS().countDownScore = false;		level = autumnBoss;		levelID = 3;		levelString = "autumn";		setupBossHpBar();	}		private function setupWinterBoss() {		winterBoss = new WinterBoss();		addChild(winterBoss);		DisplayUtil.sendToBack(winterBoss);		boss = true;		GameS.getGameS().countDownScore = false;		level = winterBoss;		levelID = 4;		levelString = "winter";		setupBossHpBar();	}		private function setupBossHpBar():void {		healthBarOutside = new HealthBarOut();		healtBar = new HealthBarIn();		addChild(healthBarOutside);		healthBarOutside.addChild(healtBar);		healthBarOutside.width = 250;		healthBarOutside.height *= 2;		healtBar.x = .5;		healtBar.y = .5;	}		private function updateHP():void {		if (boss) {			for (var i:int = 0; i < enemies.length; i++) {				healthBarOutside.x = 350;				healthBarOutside.y = 50;				healtBar.width = enemies[i].health/2.5;			}		}	}		public function createProjectile(ID:Number,type:Number,targetX:Number,targetY:Number,startX:Number,startY:Number) {		switch (ID) {			case 1:				proj = new Projectile(ID,type,targetX,targetY,startX,startY);				addChild(proj);				break;			case 2:				break;			case 3:				break;			case 4:				break;		}	}		public function getLevel():Object {		return level;	}		public function clearLevel():void {		p.charging = false;		p.jumping = false;		p.onGround = true;		Player.pCreated = false;		p.remove();	}}	}
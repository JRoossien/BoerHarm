package nl.josroossien.edugame.objects  {import flash.display.DisplayObject;import flash.display.MovieClip;import flash.events.Event;import flash.events.IEventDispatcher;import flash.geom.ColorTransform;import flash.geom.Rectangle;import flash.media.Sound;import flash.media.SoundChannel;import flash.net.URLRequest;import flash.utils.clearInterval;import flash.utils.setInterval;import nl.josroossien.edugame.builders.LevelManager;import nl.josroossien.edugame.builders.SoundManager;import nl.josroossien.edugame.core.EduGame;import nl.josroossien.edugame.display.GUI;import nl.josroossien.edugame.display.GameS;import nl.josroossien.edugame.utils.DisplayUtil;import nl.josroossien.edugame.utils.MathUtil;import nl.josroossien.edugame.utils.RectangleCollision;
public class Player extends MovieClip {		public static var player:Player;	public static var pCreated:Boolean;		private var s1:SoundChannel		public var vx:Number = 0;	private var ax:Number = 0;	public var vy:Number = 10;	private var ay:Number = 0;	private var speed:Number = 2;	private var shotPower:Number = 10;	private var frictionA:Number = .90;	private var frictionG:Number = .05;	private var frictionTot:Number = 0;	private var gravity:Number = 8;	private var groundInterval:Number;	public var pRect:Rectangle;	private var pf:PitchFork;	public var left:Boolean;		public var jumping:Boolean;	public var charging:Boolean;	public var movingL:Boolean;	public var movingR:Boolean;	public var onGround:Boolean;	private var vyTemp:Number = vy;	private var canTakeDamage:Boolean;	private var damageInterval:uint;	public var phealth:Number;	public var collectedItems = new Array();	public var pitchforks = new Array();	private var fighting:Boolean;	private var canFight:Boolean = true;	private var fightInterval:Number;	private var fightInterval2:Number;	private var count:Number = 0;	private var didLand:Boolean;	private var shootPlayed:Boolean = true;	private var playInterval:Number;		public function Player() {		pCreated = true;		count++;		trace("PLAYERRR CREATEDDD!!! NR: " + count);		pRect = new Rectangle(0, 0, this.width, this.height); 		this.name = "player";		player = this;		this.x = 100;		this.y = 568;		this.phealth = 101;		canTakeDamage = true;				this.addEventListener(Event.ENTER_FRAME,gameLoop);	}		public static function getPlayer():Player {		return player;	}		public function remove():void {		trace("Removing player!!!");		this.removeEventListener(Event.ENTER_FRAME,gameLoop);		parent.removeChild(this);	}		public function gameLoop(e:Event):void {		if (EduGame.getMain().state == "game" && pCreated == true) {			movePlayer();			checkGroundCollission();			checkItemCollission();			checkFinishCollision();			checkEnemyCollision();			checkProjCollision();			checkVoid();			checkGround();			checkDeath();			chargePitchFork();		}	}		public function movePlayer():void {		ax = 0;		if (movingL) {			if (currentFrame != 3 && shootPlayed)				gotoAndStop(1);			ax = -speed;			this.scaleX = -1;			left = true;		}		if (movingR) {			if (currentFrame != 3 && shootPlayed)				gotoAndStop(1);			ax = speed;			this.scaleX = 1;			left = false;		}		vx += ax;				if (jumping && onGround) {			gotoAndStop(3);			vy = -100;			onGround = false;			didLand = false;			SoundManager.soundMan.playSound("jump");		}				vy += gravity;		frictionTot = frictionA;		if (onGround)			frictionTot -= frictionG;		vx *= frictionTot;		vy *= frictionTot;				if (vx > 0 && vx < 0.5) {			vx = 0;			if (shootPlayed)				this.gotoAndStop(5);		}		if (vx < 0 && vx > -0.5) {			vx = 0;			if (shootPlayed)				this.gotoAndStop(5);		}				this.x += vx;		this.y += vy;		pRect.x = this.x-this.width/2;		pRect.y = this.y-this.height/2;	}		private function chargePitchFork():void {		if (charging) {			vx *= .5;			if (shotPower < 30)			shotPower += 1;		}	}		public function shootPitchFork():void {		if (this.canFight) {			this.gotoAndStop(4);			shootPlayed = false;			this.canFight = false;			this.fighting = true;			playInterval = setInterval(shootPlay, 300);			fightInterval = setInterval(resetFighting, 1000);		}	}		private function shootPlay():void {				SoundManager.soundMan.playSound("throw");		shootPlayed = true;		clearInterval(playInterval);		pf = new PitchFork(shotPower);		LevelManager.getLevelM().getLevel().addChild(pf);		pitchforks.push(pf);		shotPower = 10;		this.gotoAndStop(5);	}		private function resetFighting():void {		this.fighting = false;		this.canFight = true;		clearInterval(fightInterval);	}		private function checkGroundCollission():void {		for(var b:Number = 0; b < LevelManager.getLevelM().LvlObjects.length; b++) {			var bl:Rectangle = Rectangle(LevelManager.getLevelM().LvlObjects[b]);						var collision = RectangleCollision.rectCheckDir(bl,pRect,2,0);			if (collision == 2) {				if (didLand == false) {					gotoAndStop(2);					didLand = true;					SoundManager.soundMan.playSound("land");				}				this.vy = 0;				this.onGround = true;				this.y -= RectangleCollision.rectBot(bl,pRect,2,0);			}			if (collision == 8) {				this.y += RectangleCollision.rectTop(bl,pRect,2,0);				//this.vy *= -1;				this.jumping = false;			}			if (collision == 4)				this.x += RectangleCollision.rectLeft(bl,pRect,2,0);			if (collision == 6)				this.x -= RectangleCollision.rectRight(bl,pRect,2,0);		}	}		private function checkItemCollission():void {		if (LevelManager.getLevelM().boss == false) {			for(var i:Number = 0; i < LevelManager.getLevelM().LvlItems.length; i++) {				if (this.hitTestObject(LevelManager.getLevelM().LvlItems[i])) {					collectedItems.push(LevelManager.getLevelM().LvlItems[i]);					GUI.gui.fillInv(LevelManager.getLevelM().LvlItems[i]);					LevelManager.getLevelM().LvlItems.splice([i],1);					SoundManager.soundMan.playSound("click");				}			}			for(var j:Number = 0; j < LevelManager.getLevelM().LvlPotato.length; j++) {				if (this.hitTestObject(Potato(LevelManager.getLevelM().LvlPotato[j]))) {					GameS.getGameS().collectedItems += 1;					LevelManager.getLevelM().getLevel().removeChild(LevelManager.getLevelM().LvlPotato[j]);					LevelManager.getLevelM().LvlPotato.splice([j],1);					SoundManager.soundMan.playSound("potato");				}			}		}	}		private function checkFinishCollision():void {		if (LevelManager.getLevelM().boss == false) {			if (this.hitTestObject(LevelManager.getLevelM().getLevel().finish)) {				if (LevelManager.getLevelM().LvlItems.length == 0) {					trace("INFO: Level completed!");					SoundManager.soundMan.playSound("win");					this.x = 100;					this.y = 568;					GameS.getGameS().levelS = 250;					GameS.getGameS().damageScore = phealth;					LevelManager.getLevelM().clearLevel();					EduGame.getMain().setupScreen("puzzle",LevelManager.getLevelM().levelString);				} else {					trace("INFO: Not all items where collected!");					this.x = 100;					this.y = 568; 				}			}		}	}		private function checkVoid():void {		if (this.y-this.height > 768) {			this.phealth -= 5;		}	}		private function checkEnemyCollision():void {		for(var i:Number = 0; i < LevelManager.getLevelM().enemies.length; i++) {			if (this.hitTestObject(LevelManager.getLevelM().enemies[i])) {				if (this.canTakeDamage == true && this.alpha == 1) {					this.canTakeDamage = false;					this.phealth -= 10;					SoundManager.soundMan.playSound("damage");					if (this.vx < 0.2 && this.vx > -0.2) {						this.vx = 10;					} else {						this.vx *= -2;					}					this.alpha = .7;					damageInterval = setInterval(resetDamage, 2000);				}			}		}	}		private function checkProjCollision():void {		for(var i:Number = 0; i < LevelManager.getLevelM().projs.length; i++) {			if (this.hitTestObject(LevelManager.getLevelM().projs[i])) {				if (this.canTakeDamage == true && this.alpha == 1) {					this.canTakeDamage = false;					this.phealth -= 15;					SoundManager.soundMan.playSound("damage");					if (this.vx < 0.2 && this.vx > -0.2) {						this.vx = -20;					} else {						this.vx *= -3;					}					this.alpha = .7;					damageInterval = setInterval(resetDamage, 750);				}			}		}	}		private function resetDamage():void {		this.canTakeDamage = true;		this.alpha = 1;		clearInterval(damageInterval);	}		private function checkGround() {		if (vy > -1 && vy < 1) {			this.onGround = true;		} else {			this.onGround = false;		}	}		private function checkDeath() {		if (phealth < 1) {			trace("DEATH!");			x = 100;			y = 268;			phealth = 101;			if (LevelManager.getLevelM().boss == false) {				GameS.getGameS().kills = 0;				GameS.getGameS().collectedItems = 0;				LevelManager.getLevelM().getLevel().createCollectables();				GameS.getGameS().collectedItems = 0;			}		}	}	}}
package nl.josroossien.edugame.objects  {import flash.display.MovieClip;
import flash.events.Event;
import flash.geom.Rectangle;
import flash.utils.clearInterval;
import flash.utils.setInterval;

import nl.josroossien.edugame.builders.LevelManager;
import nl.josroossien.edugame.builders.SoundManager;
import nl.josroossien.edugame.core.EduGame;
import nl.josroossien.edugame.display.GameS;
import nl.josroossien.edugame.display.MenuS;
import nl.josroossien.edugame.utils.MathUtil;
import nl.josroossien.edugame.utils.RectangleCollision;
		public class ShootingBoss extends MovieClip {				public static var sBoss:ShootingBoss;				public var vx:Number = 0;		public var vy:Number = 4;		private var speed:Number = .1;		private var frictionTot:Number = 0.9;		private var gravity:Number = 4;		private var eRect:Rectangle;		public var health:Number = 250;		private var block:Block;		private var snowman:Snowman;		private var tree:Tree;		private var zon:Zon;		private var easterBunny:EasterBunny;		private var xPos:Number;		private var shootInterval1:Number;		private var shootInterval2:Number;		private var shootInterval3:Number;		private var shootInterval4:Number;		private var shootInterval5:Number;		private var shootInterval6:Number;		private var bossID:Number;		private var menu:MenuS;		private var dead:Boolean;		private var created:Boolean;				public var EmovingL:Boolean;		public var EmovingR:Boolean;		public var EonGround:Boolean;				public function ShootingBoss(ID:Number) {			trace("Shooting Boss...");			sBoss = this;			setupBoss(ID);			bossID = ID;			shootInterval1 = setInterval(shootProjectile1, 1000);			shootInterval2 = setInterval(shootProjectile2, 1000);			shootInterval3 = setInterval(shootProjectile3, 1000);			shootInterval4 = setInterval(shootProjectile4, 1000);			shootInterval5 = setInterval(shootProjectile5, 750);			shootInterval6 = setInterval(shootProjectile6, 1333);			this.addEventListener(Event.ENTER_FRAME,gameLoop);		}				public static function getSBoss():ShootingBoss {			return sBoss;		}				private function setupBoss(ID:Number) {			switch (ID) {				case 1:					snowman = new Snowman();					addChild(snowman);					eRect = new Rectangle(0, 0, 325, 400); 					this.x = 700;					this.xPos = 700;					this.y = 300;					trace("Snowman!");					break;				case 2:					tree = new Tree();					addChild(tree);					eRect = new Rectangle(0, 0, 325, 400); 					this.x = 700;					this.xPos = 700;					this.y = 300;					trace("Tree!");					break;				case 3:					zon = new Zon()					addChild(zon);					eRect = new Rectangle(0, 0, 250, 250);					this.x = 750;					this.xPos = 750;					this.y = 300;					trace("Zon!");					break;				case 4:					easterBunny = new EasterBunny();					addChild(easterBunny);					eRect = new Rectangle(0, 0, 250, 250);					this.x = 700;					this.xPos = 700;					this.y = 300;					trace("Easter Bunny!");					break;			}		}				private function gameLoop(e:Event):void {					moveEnemy();			checkGroundCollission();			checkVoid();			checkDeath();		}				private function moveEnemy():void {						vy += gravity;			vx *= frictionTot;			vy *= frictionTot;						this.x += vx;			if (bossID != 3) 				this.y += vy;			if (bossID == 4) {				eRect.x = this.x;				eRect.y = this.y;			} else {				eRect.x = this.x-this.width/2;				eRect.y = this.y-this.height/2;			}		}			private function checkGroundCollission():void {			for(var b:Number = 0; b < LevelManager.getLevelM().LvlObjects.length; b++) {				var bl:Rectangle = Rectangle(LevelManager.getLevelM().LvlObjects[b]);								var collision = RectangleCollision.rectCheckDir(bl,eRect,2,0);				if (collision == 2) {					this.vy = 0;					this.y -= RectangleCollision.rectBot(bl,eRect,2,0);				}				if (collision == 8)					this.y += RectangleCollision.rectTop(bl,eRect,2,0);				if (collision == 4) {					this.x += RectangleCollision.rectLeft(bl,eRect,2,0);					this.vx *= -1;					this.EmovingL = false;					this.EmovingR = true;				}				if (collision == 6) {					this.x -= RectangleCollision.rectRight(bl,eRect,2,0);					this.vx *= -1;					this.EmovingL = true;					this.EmovingR = false;				}			}		}				private function checkVoid():void {			if (this.y-this.height > 768) {				this.health -= 10;			}		}				private function shootProjectile1():void {			if (Player.pCreated == true && !dead) {				if (bossID == 1) 					LevelManager.getLevelM().createProjectile(1,1,Player.getPlayer().x,Player.getPlayer().y,this.x,this.y);			}		}				private function shootProjectile2():void {			if (Player.pCreated == true && !dead) {				if (bossID == 2) {					LevelManager.getLevelM().createProjectile(1,2,Player.getPlayer().x,Player.getPlayer().y,this.x-100,this.y-170);				}			}		}				private function shootProjectile3():void {			if (Player.pCreated == true && !dead) {				if (bossID == 2) {					LevelManager.getLevelM().createProjectile(1,2,Player.getPlayer().x,Player.getPlayer().y,this.x+100,this.y-170);				}			}		}				private function shootProjectile4():void {			if (Player.pCreated == true && !dead) {				if (bossID == 2) {					LevelManager.getLevelM().createProjectile(1,2,Player.getPlayer().x,Player.getPlayer().y,this.x,this.y-200);				}			}		}				private function shootProjectile5():void {			if (Player.pCreated == true && !dead) {				if (bossID == 3) 					LevelManager.getLevelM().createProjectile(1,3,Player.getPlayer().x,Player.getPlayer().y,this.x,this.y);			}		}				private function shootProjectile6():void {			if (Player.pCreated == true && !dead) {				if (bossID == 4)					LevelManager.getLevelM().createProjectile(1,4,Player.getPlayer().x,Player.getPlayer().y,this.x+50,this.y+150);			}		}				private function checkDeath():void {			if (this.health < 1  && this.rotation < 90) {				this.rotation += 2;				dead = true;			}			if (dead && !created) {				GameS.getGameS().damageScore += Player.getPlayer().phealth;				GameS.getGameS().levelS = 1000;				EduGame.getMain().saveData();								SoundManager.soundMan.playSound("win");								clearInterval(shootInterval1);				clearInterval(shootInterval2);				clearInterval(shootInterval3);				clearInterval(shootInterval4);				clearInterval(shootInterval5);				clearInterval(shootInterval6);								LevelManager.getLevelM().clearLevel();								created = true;				var bl = new Block(-100,-100,1500,1000,0x187A0F);				bl.alpha = .3;				LevelManager.getLevelM().addChild(bl);								if (bossID == 1)					removeChild(snowman);				if (bossID == 2)					removeChild(tree);				if (bossID == 3)					removeChild(zon);				if (bossID == 4)					removeChild(easterBunny);								parent.removeChild(this);								menu = new MenuS("bosscomplete");				LevelManager.getLevelM().addChild(menu);			}		}				public function kill():void {			clearInterval(shootInterval1);			clearInterval(shootInterval2);			clearInterval(shootInterval3);			clearInterval(shootInterval4);			clearInterval(shootInterval5);			clearInterval(shootInterval6);		}		}}